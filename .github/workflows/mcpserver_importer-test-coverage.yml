name: Test Coverage - mcpserver_importer

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'mcpserver_importer/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'mcpserver_importer/**'
  workflow_dispatch:
    inputs:
      run_all_tests:
        description: 'Run all tests (not just coverage)'
        required: false
        default: false
        type: boolean

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          mcpserver_importer/.venv
          mcpserver_importer/.uv/cache
        key: ${{ runner.os }}-uv-mcpserver_importer-${{ hashFiles('mcpserver_importer/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-mcpserver_importer-

    - name: Install dependencies
      run: |
        cd mcpserver_importer
        uv sync --extra test

    - name: Run linting
      run: |
        cd mcpserver_importer
        uv run make lint

    - name: Run test coverage
      run: |
        cd mcpserver_importer
        uv run make test-coverage
      env:
        PYTHONPATH: ${{ github.workspace }}/mcpserver_importer

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./mcpserver_importer/coverage.xml
        flags: unittests
        name: codecov-mcpserver_importer
        fail_ci_if_error: false
        verbose: true

    - name: Run all tests (if requested)
      if: ${{ github.event.inputs.run_all_tests == 'true' }}
      run: |
        cd mcpserver_importer
        uv run make test
      env:
        PYTHONPATH: ${{ github.workspace }}/mcpserver_importer

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-mcpserver_importer-${{ matrix.python-version }}
        path: |
          mcpserver_importer/htmlcov/
          mcpserver_importer/.pytest_cache/
          mcpserver_importer/coverage.xml
        retention-days: 30
        if-no-files-found: warn

    - name: Comment PR with coverage results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // Try to read coverage report
            const coveragePath = path.join(process.env.GITHUB_WORKSPACE, 'mcpserver_importer', 'htmlcov', 'index.html');
            if (fs.existsSync(coveragePath)) {
              const coverageContent = fs.readFileSync(coveragePath, 'utf8');
              const coverageMatch = coverageContent.match(/<span class="pc_cov">(\d+\.?\d*)%<\/span>/);
              
              if (coverageMatch) {
                const coverage = coverageMatch[1];
                const comment = `## Test Coverage Results - mcpserver_importer âœ…
                
                **Coverage:** ${coverage}%
                
                All tests passed successfully! ðŸŽ‰
                
                Coverage report: [View Coverage Report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
                `;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            }
          } catch (error) {
            console.log('Could not read coverage report:', error.message);
          } 